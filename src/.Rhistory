for (rep in 1:reps){
beta20 = rnorm(p20,0,1)
beta21 = rnorm(p21,0,1)
beta2 = c(beta20,beta21)
beta1 = getBeta1(beta20,beta21)
x = mvrnorm(n, mu, sigma) #Generate X
x1 = x[,1:p1] #Create X1
x2 = x[,(p1+1):(p1+p2)] #Create X2
a1 = rbinom(n,1,0.5) #Randomly assign a1
a1[a1==0] = -1
a2 = rbinom(n,1,0.5) #Randomly assign a2
a2[a2==0] = -1
#Create h1 from x1
h1 = x1
cols1 = sample(1:p1, floor(ncol(h1)/2))
h10 = h1[,cols1]
h11 = h1[,setdiff(1:ncol(h1),cols1)]
h1 = cbind(h10,h11)
p10 = ncol(h10) # dimension h10
p11 = ncol(h11) # dimension of h11
if (is.null(p10)){
p10 = 1
}
if (is.null(p11)){
p11 = 1
}
#Create h2 from a1,x1,x2
cols2 = sample(1:ncol(x2), floor(ncol(x2)/2))
h20 = cbind(h10, x2[,cols2])
h21 = cbind(h11, x2[,setdiff(1:ncol(x2),cols2)])
h21 = cbind(a1, h21)
h2 = cbind(h20, h21)
eps = rnorm(n, 0, sigma2)  #Generate epsilon
Y = h20%*%beta20 + a2*h21%*%beta21 + eps #Calculate values of Y
#Q2 = h20%*%beta20 + a2*h21%*%beta21
Q2 = h20%*%beta20 + abs(h21%*%beta21) #Calculate true value of Q2
B1 = cbind(h10, a1*h11)  #Create vector of (h10, a1h11)
beta10 = beta1[1:p10]
beta11 = beta1[(p10+1):p1]
beta = c(beta1, beta2) #Create beta*
## Calculate V(pi^opt)
b1l = length(beta11)
H11Var = diag(0.8, b1l) + matrix(0.2, nrow=b1l,ncol=b1l)
V_opt = sqrt(2*beta11%*%H11Var%*%beta11/pi) #True value of V
V0 = V_opt - 1
#Solve for beta2hat
B2 = cbind(h20, a2*h21)
beta2hat = solve(t(B2)%*%B2)%*%t(B2)%*%Y
beta20hat = beta2hat[1:p20]
beta21hat = beta2hat[(p20+1):ncol(h2)]
SigmaQ2Hat = t(B2)%*%B2/n
sum = matrix(0,nrow=length(beta2),ncol=length(beta2))
for (i in 1:n){
sum = sum + ((Y[i,] - (B2%*%beta2hat)[i,])^2)*B2[i,]%*%t(B2[i,])
}
OmegaQ2Hat = sum/n
invVarBeta2 = SigmaQ2Hat%*%solve(OmegaQ2Hat)%*%SigmaQ2Hat
VarBeta2 = solve(invVarBeta2)
VarBeta21 = VarBeta2[(p20+1):length(beta2), (p20+1):length(beta2)]
invVarBeta21 = solve(VarBeta21)
beta1hat = getBeta1hat(beta21hat)
beta10hat = beta1hat[1:p10]
beta11hat = beta1hat[(p10+1):ncol(h1)]
Vhat_opt = EstVhat(beta10hat, beta11hat)
prevb121 = c(beta1hat, beta21hat)
lambda = 1
b121 = optim(prevb121,objectiveLI,method='L-BFGS-B')$par
while (sum((b121-prevb121)^2)>0.001){
prevb121 = b121
lambda = lambda*.5
b121 = optim(prevb121,objectiveLI,method='L-BFGS-B')$par
}
b1 = b121[1:p1]
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_LI = Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
prevb121 = c(beta1hat, beta21hat)
lambda = 1
b121 = optim(prevb121,objectiveNegUI,method='L-BFGS-B')$par
while (sum((b121-prevb121)^2)>0.001){
prevb121 = b121
lambda = lambda*.5
b121 = optim(prevb121,objectiveNegUI,method='L-BFGS-B')$par
}
b1 = b121[1:p1]
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_UI = Vhat + sigmaVhat*qnorm(1-eta/2)/sqrt(n)
results[rep,1] = V_LI
results[rep,2] = V_UI
results[rep,3] = Vhat_opt
results[rep,4] = V_opt
print(rep)
}
containV = 0
for (i in 1:nrow(results)){
if (results[i,1] < results[i,4] && results[i,2] > results[i,4]){
containV = containV + 1
}
}
containV
results
p2
b121
beta121
beta121 = b121
b1 = beta121[1:p1]
b21 = beta121[(1+p1):length(beta121)]
fn1 = -n*t((beta21hat-b21))%*%invVarBeta21%*%(beta21hat-b21) + qchisq(1-alpha,p2+1)
fn1
beta121
b121
beta21hat
b1
beta1hat
fn2 = -n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
VarB1 = getVarBeta1(b21)
fn2 = -n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
fn2
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_LI = Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
if ((fn1 > 0)&(fn2 > 0)){
obj = V_LI - lambda*log(fn1) - lambda*log(fn2)
}
else{
obj = 999999
}
if ((fn1 > 0)&(fn2 > 0)){
obj = V_LI - lambda*log(fn1) - lambda*log(fn2)
} else{
obj = 999999
}
obj
b121
objectiveLI = function(beta121){
b1 = beta121[1:p1]
b21 = beta121[(1+p1):length(beta121)]
fn1 = -n*t((beta21hat-b21))%*%invVarBeta21%*%(beta21hat-b21) + qchisq(1-alpha,p2+1)
b1hat = getBeta1hat(b21)
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
b10hat = b1hat[1:p10]
b11hat = b1hat[(p10+1):ncol(h1)]
VarB1 = getVarBeta1(b21)
fn2 = -n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_LI = Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
if ((fn1 > 0)&(fn2 > 0)){
obj = V_LI - lambda*log(fn1) - lambda*log(fn2)
} else{
obj = 999999
}
return(obj)
}
objectiveNegUI = function(beta121){
b1 = beta121[1:p1]
b21 = beta121[(1+p1):length(beta121)]
fn1 = -n*t((beta21hat-b21))%*%invVarBeta21%*%(beta21hat-b21) + qchisq(1-alpha,p2+1)
b1hat = getBeta1hat(b21)
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
b10hat = b1hat[1:p10]
b11hat = b1hat[(p10+1):ncol(h1)]
VarB1 = getVarBeta1(b21)
fn2 = -n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
negV_UI = -Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
if ((fn1 > 0)&(fn2 > 0)){
obj = negV_UI - lambda*log(fn1) - lambda*log(fn2)
}else{
obj = 999999
}
return(obj)
}
prevb121 = c(beta1hat, beta21hat)
lambda = 1
b121 = optim(prevb121,objectiveLI,method='L-BFGS-B')$par
while (sum((b121-prevb121)^2)>0.001){
prevb121 = b121
lambda = lambda*.5
b121 = optim(prevb121,objectiveLI,method='L-BFGS-B')$par
}
b1 = b121[1:p1]
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_LI = Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
b121
V_LI
V_opt
Vhat
Vhat_opt
beta121
b121
beta121 = b121
b1 = beta121[1:p1]
b21 = beta121[(1+p1):length(beta121)]
fn1 = -n*t((beta21hat-b21))%*%invVarBeta21%*%(beta21hat-b21) + qchisq(1-alpha,p2+1)
fn1
b1hat = getBeta1hat(b21)
b10 = b1[1:p10]
b11 = b1[(p10+1):p1]
b10hat = b1hat[1:p10]
b11hat = b1hat[(p10+1):ncol(h1)]
VarB1 = getVarBeta1(b21)
fn2 = -n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
fn2
lambda
Vhat = EstVhat(b10, b11)
sigmaVhat = EstSigmaVhat(b10, b11)
V_LI = Vhat - sigmaVhat*qnorm(1-eta/2)/sqrt(n)
V_LI
Vhat
sigmaVhat
V_opt
b10
b11
beta10hat
beta11hat
beta20
b20
b10hat
beta10hat
b10
b10 - b10hat
-n*t((b1hat-b1))%*%solve(VarB1)%*%(b1hat-b1) + qchisq(1-rho,p1)
EstSigmaVhat(beta10hat,beta11hat)
EstSigmaVhat(b10,b11)
mean(h10%*%b10 + abs(h11%*%b11))
vb = mean(h10%*%b10 + abs(h11%*%b11))
sqrt(mean((h10%*%b10 + abs(h11%*%b11) - vb)^2))
mean((h10%*%b10 + abs(h11%*%b11) - vb)^2)
sqrt(mean((h10%*%b10 + abs(h11%*%b11) - vb)^2))
(h10%*%b10 + abs(h11%*%b11) - vb)
(h10%*%b10 + abs(h11%*%b11) - vb)^2
(h10%*%b10 + abs(h11%*%b11) - vb)
h10[80,]
h11[80,]
beta10
b10
b11
h10
results
results[,2]-results[,1]
respBAU = 1-0.80;
respBIM = 1-0.765;
respBIMP = 1-0.765;
respBAU
respBIM
respBIMP
icc = 0.10;
nSchool = 70;
nSubjPSchool = floor(430*0.80*0.2);     #  high risk only
sigLevel = 0.05;
nSubjPSchool
sigmaDelta = icc/(1-icc);
zeta0 = qnorm(respBAU)*sqrt(1+sigmaDelta);
zeta1 = qnorm((respBIM+respBIMP)/2)*sqrt(1+sigmaDelta)-zeta0;
zeta0
zeta1
require (lme4);
install.packages('lme4')
require (lme4);
require(multcomp);
M = 1000; # number MC replications
pwr = 0;
BIMBIMPVBAU = matrix(c(0,1), 1);
BIMBIMPVBAU
sigmaDelta
zeta0
zeta1
respBAU = 1-0.80;
respBIM = 1-0.765;
respBIMP = 1-0.765;
icc = 0.10;
nSchool = 70;
nSubjPSchool = floor(430*0.80*0.2);     #  high risk only
sigLevel = 0.05;
## Solve for model parameters
sigmaDelta = icc/(1-icc);
zeta0 = qnorm(respBAU)*sqrt(1+sigmaDelta);
zeta1 = qnorm((respBIM+respBIMP)/2)*sqrt(1+sigmaDelta)-zeta0;
## Simulate power
require (lme4);
require(multcomp);
M = 1000; # number MC replications
pwr = 0;
BIMBIMPVBAU = matrix(c(0,1), 1);
m = 1
delta = rnorm(nSchool)*sqrt(sigmaDelta);
delta
epsilon = rnorm(nSchool*nSubjPSchool);
epsilon
err = rep(delta, nSubjPSchool) + epsilon;
err
schoolInd = as.factor(rep(1:nSchool, nSubjPSchool));
schoolInd
txt = as.factor(sample(1:3, size=nSubjPSchool*nSchool,replace=T));
txt
levels(txt) = c("1","2","2")
summary(txt)
levels(txt)
txt
z = zeta0 + zeta1*(txt==2)  + err;
y = as.numeric(z > 0);
z = zeta0 + zeta1*(txt==2)  + err;
z
y
mdl = glmer(y ~ txt + (1|schoolInd), family=binomial(link="probit"));
mdl
pBIMBIMPVBAU = summary(glht(mdl, BIMBIMPVBAU))$test$pvalues[1];
pBIMBIMPVBAU
### Set parameters
respBAU = 1-0.80;
respBIM = 1-0.765;
respBIMP = 1-0.765;
icc = 0.10;
nSchool = 70;
nSubjPSchool = floor(430*0.80*0.2);     #  high risk only
sigLevel = 0.05;
## Solve for model parameters
sigmaDelta = icc/(1-icc);
zeta0 = qnorm(respBAU)*sqrt(1+sigmaDelta);
zeta1 = qnorm((respBIM+respBIMP)/2)*sqrt(1+sigmaDelta)-zeta0;
## Simulate power
require (lme4);
require(multcomp);
M = 1000; # number MC replications
pwr = 0;
BIMBIMPVBAU = matrix(c(0,1), 1);
for (m in 1:M){
delta = rnorm(nSchool)*sqrt(sigmaDelta);
epsilon = rnorm(nSchool*nSubjPSchool);
err = rep(delta, nSubjPSchool) + epsilon;
schoolInd = as.factor(rep(1:nSchool, nSubjPSchool));
txt = as.factor(sample(1:3, size=nSubjPSchool*nSchool,replace=T));
levels(txt) = c("1","2","2")
z = zeta0 + zeta1*(txt==2)  + err;
y = as.numeric(z > 0);
mdl = glmer(y ~ txt + (1|schoolInd), family=binomial(link="probit"));
pBIMBIMPVBAU = summary(glht(mdl, BIMBIMPVBAU))$test$pvalues[1];
if (pBIMBIMPVBAU < sigLevel){
pwr = pwr + 1;
}
print (c(m,pwr/m));
}
pBIMBIMPVBAU = summary(glht(mdl, BIMBIMPVBAU))$test$pvalues[1];
summary(glht(mdl, BIMBIMPVBAU));
summary(glht(mdl, BIMBIMPVBAU))$test$pvalues[1];
respBAU = 1-0.80;
respBIM = 1-0.754;
respBIMP = 1-0.744;
icc = 0.10;
nSchool = 70;
nSubjPSchool = floor(430*0.80*0.2);     #  high risk only
sigLevel = 0.05/3.0;
## Solve for model parameters
sigmaDelta = icc/(1-icc);
zeta0 = qnorm(respBAU)*sqrt(1+sigmaDelta);
zeta1 = qnorm(respBIM)*sqrt(1+sigmaDelta)-zeta0;
zeta2 = qnorm(respBIMP)*sqrt(1+sigmaDelta)-zeta0;
## Simulate power
require (lme4);
require(multcomp);
M = 1000; # number MC replications
pwr = c(0,0,0,0);
BAUVBIM = matrix(c(0,1, 0), 1);
BAUVBIMP = matrix(c(0,0,1), 1);
BIMVBIMP = matrix(c(0,1,-1), 1);
BIMBIMPVBAU = matrix(c(0,1,0,0,0,1), 2,3,byrow=T);
source('~/Documents/Games/flyingsquirrelsjs/src/randomLevelGen.R')
View(groundY)
rbinom(1000)
rbinom(1000, 1)
rbinom(1000, 1, 0.5)
rmultinom(1000, 1, 0.5)
colorTheme = sample(1:3, numLevels, replace = TRUE)
numLevels = 1000
colorTheme = sample(1:3, numLevels, replace = TRUE)
colorTheme
colorTheme = sample(1:3, numLevels, replace = TRUE)
treeType = sample(1:4, numLevels, replace = TRUE)
skyType = sample(1:2, numLevels, replace = TRUE)
starInd = sample(0:1, numLevels, replace = TRUE)
groundType = sample(1:2, numLevels, replace = TRUE)
runif(1000, 250, 350)
skyX = runif(1000, 580, 620)
skyY = runif(1000, 30, 70)
cbind(groundY1, groundY2)
groundY1 = runif(1000, 250, 350)
groundY2 = runif(1000, 250, 350)
groundY3 = runif(1000, 250, 350)
cbind(groundY1, groundY2)
cbind(groundY1, groundY2, groundY3)
set.seed(12075)
numLevels = 1000
colorTheme = sample(1:8, numLevels, replace = TRUE)
treeType = sample(1:4, numLevels, replace = TRUE)
skyType = sample(1:2, numLevels, replace = TRUE)
starInd = sample(0:1, numLevels, replace = TRUE)
groundType = sample(1:2, numLevels, replace = TRUE)
groundY1 = runif(1000, 250, 350)
groundY2 = runif(1000, 250, 350)
groundY3 = runif(1000, 250, 350)
groundY = cbind(groundY1, groundY2, groundY3)
colorTheme = rep(1:8, n)
colorTheme = rep(1:8, numLevels)
colorTheme = rep(1:8, numLevels/8)
groundY = cbind(groundY1, groundY2, groundY3)
View(groundY)
groundY[,order(groundY)]
sort(groundY)
sort(groundY[,1])
sort(groundY[1,])
sort(groundY[2,])
sort(groundY[3,])
apply(groundY,2,sort)
apply(groundY,1,sort)
apply(groundY,2,sort)
apply(t(groundY),2,sort)
t(apply(t(groundY),2,sort))
t(apply(groundY,1,sort))
groundY = t(apply(groundY,1,sort))
groundY = cbind(groundY1, groundY2, groundY3)
groundY2 = t(apply(groundY,1,sort))
groundY[1:5,]
groundY2[1:5,]
set.seed(12075)
numLevels = 1000
colorTheme = sample(1:8, numLevels, replace = TRUE)
#colorTheme = rep(1:8, numLevels/8)
treeType = sample(1:4, numLevels, replace = TRUE)
skyType = sample(1:2, numLevels, replace = TRUE)
starInd = sample(0:1, numLevels, replace = TRUE)
groundType = sample(1:2, numLevels, replace = TRUE)
groundY1 = runif(1000, 250, 350)
groundY2 = runif(1000, 250, 350)
groundY3 = runif(1000, 250, 350)
groundY = cbind(groundY1, groundY2, groundY3)
groundY = t(apply(groundY,1,sort))
matrix(c(1,2,3),nrow=3,ncol=3)
matrix(c(1,2,3),nrow=3,ncol=3,byrow = TRUE)
groundX = matrix(c(-100,200,500),nrow=numLevels,ncol=3,byrow = TRUE)
head(groundX)
sample(c(1,2,3))
groundX = t(apply(groundY,1,sample))
groundX = matrix(c(-100,200,500),nrow=numLevels,ncol=3,byrow = TRUE)
groundX = t(apply(groundX,1,sample))
head(groundX)
runif(numLevels, 10 , 20)
treeAdj = matrix(runif(numLevels*3, 10 , 20), nrow=numLevels, ncol = 3)
treeYAdj = matrix(runif(numLevels*3, 10 , 20), nrow=numLevels, ncol = 3)
treeY = groundY + treeYAdj
head(treeYAdj)
head(groundY)
head(treeY)
treeYAdj = matrix(runif(numLevels*3, 200 , 230), nrow=numLevels, ncol = 3)
treeY = groundY + treeYAdj
treeXAdj = matrix(runif(numLevels*3, 200 , 300), nrow=numLevels, ncol = 3)
treeX = groundX + treeXAdj
groundImgType = matrix(sample(1:2, numLevels*3, replace = TRUE), nrow = numLevels, ncol = 3)
head(groundImgType)
groundImgType = matrix(sample(1:3, numLevels*3, replace = TRUE), nrow = numLevels, ncol = 3)
head(groundImgType)
skyX = runif(1000, 580, 620)
skyY = runif(1000, 30, 70)
starX = matrix(c(runif(1,3), runif(3,5),runif(4,5)), nrow = 5, ncol = 3)
starX = matrix(c(runif(1,1,3), runif(1,3,5),runif(1,4,5)), nrow = 5, ncol = 3)
starX
starX = matrix(c(runif(1,1,3), runif(1,3,4),runif(1,4,5)), nrow = 5, ncol = 3)
starX
starX = matrix(c(runif(1,1,3), runif(1,3,4),runif(1,4,5)), nrow = 5, ncol = 3, byrow=TRUE)
starX
starX = runif(numLevels, 50, 150)
starX = cbind(runif(numLevels, 50, 150), runif(numLevels, 150,250))
head(starX)
starX = cbind(runif(numLevels, 50, 150), runif(numLevels, 150,250), runif(numLevels, 250,350), runif(numLevels, 350,450), runif(numLevels, 450,550), runif(numLevels, 650,750))
starX = cbind(runif(numLevels, 50, 150), runif(numLevels, 150,250),
runif(numLevels, 250,350), runif(numLevels, 350,450),
runif(numLevels, 450,550), runif(numLevels, 650,750))
head(starX)
starY = cbind(runif(numLevels, 10, 70), runif(numLevels, 10,70),
runif(numLevels, 10,70), runif(numLevels, 10,70),
runif(numLevels, 10,70), runif(numLevels, 10,70))
starX = cbind(runif(numLevels, 50, 150), runif(numLevels, 150,250),
runif(numLevels, 250,350), runif(numLevels, 350,450),
runif(numLevels, 450,550), runif(numLevels, 650,750))
source('~/Documents/Games/flyingsquirrelsjs/src/randomLevelGen.R')
levelData = cbind(colorTheme, treeType, skyType, starInd, groundType, groundY, groundX, treeY, treeX, groundImgType, skyX, skyY, starX, starY)
View(levelData)
source('~/Documents/Games/flyingsquirrelsjs/src/randomLevelGen.R')
setwd("~/Documents/Games/flyingsquirrelsjs/src")
write.csv(randomLevelData, file="randomLevelData.csv")
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE)
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = FALSE)
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = TRUE)
View(randomLevelData)
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = FALSE)
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE)
write.csv(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = FALSE)
write.table(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = FALSE)
write.table(randomLevelData, file="randomLevelData.csv", row.names = FALSE, col.names = FALSE, sep=",")
source('~/Documents/Games/flyingsquirrelsjs/src/randomLevelGen.R')
source('~/Documents/Games/flyingsquirrelsjs/src/randomLevelGen.R')
